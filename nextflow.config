// Global default params, used in configs
params {
  // General options
  // version = '1.0'
  outdir = "./output"
  tracedir = "${params.outdir}/pipeline_info"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  standard { includeConfig 'conf/base.config' }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  slurm {
    includeConfig 'conf/base.config'
    process.executor = 'slurm'
  }
}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
  overwrite = true
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
  overwrite = true
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.dot"
  overwrite = true
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  // Process-specific resource requirements
  errorStrategy  = 'retry'
  maxRetries = 1

  // Process-specific resource requirements
    withLabel: 'medium' {
        memory = 70.GB
    }
    withLabel : 'bigmem' {
        memory = { 120.GB * task.attempt }
        time = { 24.h * task.attempt }
        cpus = 9
    }
    withLabel: 'biggermem' {
        memory = { 200.GB * task.attempt }
        time = {100.h * task.attempt }
        cpus = 9
    }
}

manifest {
  name = 'PRS analysis'
  //homePage = 'https://github.com/nanjalaruth/PRS-analysis'
  description = 'Polygenic risk analysis in blood cell traits'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.10.0'
  version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}